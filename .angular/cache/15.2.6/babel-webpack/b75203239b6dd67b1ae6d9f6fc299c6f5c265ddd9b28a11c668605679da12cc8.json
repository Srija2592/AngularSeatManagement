{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { tap } from 'rxjs';\nlet SeatComponent = class SeatComponent {\n  constructor(bookservice, fb) {\n    this.bookservice = bookservice;\n    this.fb = fb;\n    this.noofseats = 0;\n    this.seatnumber = new FormControl(0, Validators.required);\n    this.ifavailable = true;\n    this.remaining = 0;\n    this.bookedseats = [];\n    this.seatavailable = true;\n    this.sevenSeater = [1, 2, 3, 4, 5, 6, 7];\n    this.threeSeater = [1, 2, 3];\n  }\n  ngOnInit() {\n    this.createForm();\n    this.data = this.bookservice.data.pipe(tap(d => this.remaining = d.remaining));\n  }\n  createForm() {\n    this.bookingform = this.fb.group({\n      noofseats: ['', Validators.required]\n    });\n  }\n  getSeatNum(n, row) {\n    return (row - 1) * 7 + n;\n  }\n  checkBook(n, row, bs) {\n    const seat = this.getSeatNum(n, row);\n    return bs.some(bs => bs === seat);\n  }\n  sendvalue() {\n    this.ifavailable = false;\n  }\n  selectseats() {\n    if (this.noofseats > this.remaining) {\n      this.seatavailable = false;\n      console.log(\"unavailable\");\n    }\n    this.resseats = this.bookservice.bookseats(this.noofseats);\n    this.remaining = this.resseats[1];\n    this.bookedseats = this.resseats[0];\n    let books = [];\n    books.unshift({\n      time: Date.now(),\n      seats: this.bookedseats\n    });\n    this.bookings = books;\n    this.bookservice.updatedata(this.bookedseats);\n  }\n};\n__decorate([Input()], SeatComponent.prototype, \"noofseats\", void 0);\nSeatComponent = __decorate([Component({\n  selector: 'app-seat',\n  templateUrl: './seat.component.html',\n  styleUrls: ['./seat.component.css']\n})], SeatComponent);\nexport { SeatComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,KAAK,QAAgB,eAAe;AACxD,SAAsBC,WAAW,EAAaC,UAAU,QAAQ,gBAAgB;AAEhF,SAAqBC,GAAG,QAAQ,MAAM;AAO/B,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAExBC,YAAoBC,WAA2B,EAASC,EAAc;IAAlD,gBAAW,GAAXD,WAAW;IAAyB,OAAE,GAAFC,EAAE;IAGjD,cAAS,GAAQ,CAAC;IAC3B,eAAU,GAAC,IAAIN,WAAW,CAAC,CAAC,EAACC,UAAU,CAACM,QAAQ,CAAC;IAEjD,gBAAW,GAAS,IAAI;IAExB,cAAS,GAAK,CAAC;IAEf,gBAAW,GAAC,EAAE;IACd,kBAAa,GAAS,IAAI;IACnB,gBAAW,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACnC,gBAAW,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAb0C;EAexEC,QAAQ;IACN,IAAI,CAACC,UAAU,EAAE;IACjB,IAAI,CAACC,IAAI,GAAC,IAAI,CAACL,WAAW,CAACK,IAAI,CAACC,IAAI,CAACT,GAAG,CAACU,CAAC,IAAG,IAAI,CAACC,SAAS,GAACD,CAAC,CAACC,SAAU,CAAC,CAAC;EAC5E;EAEAJ,UAAU;IACR,IAAI,CAACK,WAAW,GAAC,IAAI,CAACR,EAAE,CAACS,KAAK,CAAC;MAACC,SAAS,EAAC,CAAC,EAAE,EAACf,UAAU,CAACM,QAAQ;IAAC,CAAC,CAAC;EACtE;EAEAU,UAAU,CAACC,CAAS,EAAEC,GAAW;IAC/B,OAAO,CAACA,GAAG,GAAG,CAAC,IAAI,CAAC,GAAGD,CAAC;EAC1B;EAEAE,SAAS,CAACF,CAAS,EAAEC,GAAW,EAAEE,EAAY;IAC5C,MAAMC,IAAI,GAAG,IAAI,CAACL,UAAU,CAACC,CAAC,EAAEC,GAAG,CAAC;IACpC,OAAOE,EAAE,CAACE,IAAI,CAACF,EAAE,IAAIA,EAAE,KAAKC,IAAI,CAAC;EACnC;EAEAE,SAAS;IACP,IAAI,CAACC,WAAW,GAAC,KAAK;EACxB;EAEAC,WAAW;IACT,IAAG,IAAI,CAACV,SAAS,GAAC,IAAI,CAACH,SAAS,EAAC;MAC/B,IAAI,CAACc,aAAa,GAAC,KAAK;MACxBC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;;IAG5B,IAAI,CAACC,QAAQ,GAAC,IAAI,CAACzB,WAAW,CAAC0B,SAAS,CAAC,IAAI,CAACf,SAAS,CAAC;IACxD,IAAI,CAACH,SAAS,GAAC,IAAI,CAACiB,QAAQ,CAAC,CAAC,CAAC;IAC/B,IAAI,CAACE,WAAW,GAAC,IAAI,CAACF,QAAQ,CAAC,CAAC,CAAC;IACjC,IAAIG,KAAK,GAAC,EAAE;IACZA,KAAK,CAACC,OAAO,CAAC;MAACC,IAAI,EAACC,IAAI,CAACC,GAAG,EAAE;MAACC,KAAK,EAAC,IAAI,CAACN;IAAW,CAAC,CAAC;IACvD,IAAI,CAACO,QAAQ,GAACN,KAAK;IACnB,IAAI,CAAC5B,WAAW,CAACmC,UAAU,CAAC,IAAI,CAACR,WAAW,CAAC;EAI/C;CACD;AAnDUS,YAAR1C,KAAK,EAAE,gDAAoB;AALjBI,aAAa,eALzBL,SAAS,CAAC;EACT4C,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,GACWzC,aAAa,CAwDzB;SAxDYA,aAAa","names":["Component","Input","FormControl","Validators","tap","SeatComponent","constructor","bookservice","fb","required","ngOnInit","createForm","data","pipe","d","remaining","bookingform","group","noofseats","getSeatNum","n","row","checkBook","bs","seat","some","sendvalue","ifavailable","selectseats","seatavailable","console","log","resseats","bookseats","bookedseats","books","unshift","time","Date","now","seats","bookings","updatedata","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\s.srija\\SeatManagement\\src\\app\\seat\\seat.component.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { BookseatService } from '../bookseat.service';\nimport { Observable, tap } from 'rxjs';\n\n@Component({\n  selector: 'app-seat',\n  templateUrl: './seat.component.html',\n  styleUrls: ['./seat.component.css']\n})\nexport class SeatComponent implements OnInit {\n\n  constructor(private bookservice:BookseatService,private fb:FormBuilder){}\n\n  resseats:any;\n  @Input() noofseats:number=0;\n  seatnumber=new FormControl(0,Validators.required);\n  bookingform!:FormGroup;\n  ifavailable:boolean=true;\n  public data!: Observable<any>;\n  remaining:any=0;\n  bookings:any;\n  bookedseats=[];\n  seatavailable:boolean=true;\n  public sevenSeater = [1, 2, 3, 4, 5, 6, 7];\n  public threeSeater = [1, 2, 3];\n\n  ngOnInit(): void {\n    this.createForm();\n    this.data=this.bookservice.data.pipe(tap(d=>(this.remaining=d.remaining)))\n  }\n\n  createForm(){\n    this.bookingform=this.fb.group({noofseats:['',Validators.required]});\n  }\n\n  getSeatNum(n: number, row: number): number {\n    return (row - 1) * 7 + n;\n  }\n\n  checkBook(n: number, row: number, bs: number[]): boolean {\n    const seat = this.getSeatNum(n, row);\n    return bs.some(bs => bs === seat);\n  }\n\n  sendvalue(){\n    this.ifavailable=false;\n  }\n\n  selectseats(){\n    if(this.noofseats>this.remaining){\n      this.seatavailable=false;\n      console.log(\"unavailable\");\n\n    }\n    this.resseats=this.bookservice.bookseats(this.noofseats);\n    this.remaining=this.resseats[1];\n    this.bookedseats=this.resseats[0];\n    let books=[];\n    books.unshift({time:Date.now(),seats:this.bookedseats});\n    this.bookings=books;\n    this.bookservice.updatedata(this.bookedseats);\n\n\n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}