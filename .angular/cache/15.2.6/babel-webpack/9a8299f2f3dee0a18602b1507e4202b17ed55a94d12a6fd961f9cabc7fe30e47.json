{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class BookseatService {\n  constructor() {\n    this.dataStore = {\n      seatChart: [{\n        row: 1,\n        booked: 2,\n        max: 7,\n        start: 1,\n        booked_seats: [1, 2]\n      }, {\n        row: 2,\n        booked: 1,\n        max: 7,\n        start: 8,\n        booked_seats: [11]\n      }, {\n        row: 3,\n        booked: 3,\n        max: 7,\n        start: 15,\n        booked_seats: [15, 16, 17]\n      }, {\n        row: 4,\n        booked: 0,\n        max: 7,\n        start: 22,\n        booked_seats: []\n      }, {\n        row: 5,\n        booked: 0,\n        max: 7,\n        start: 29,\n        booked_seats: []\n      }, {\n        row: 6,\n        booked: 0,\n        max: 7,\n        start: 36,\n        booked_seats: []\n      }, {\n        row: 7,\n        booked: 0,\n        max: 7,\n        start: 43,\n        booked_seats: []\n      }, {\n        row: 8,\n        booked: 0,\n        max: 7,\n        start: 50,\n        booked_seats: []\n      }, {\n        row: 9,\n        booked: 0,\n        max: 7,\n        start: 57,\n        booked_seats: []\n      }, {\n        row: 10,\n        booked: 0,\n        max: 7,\n        start: 64,\n        booked_seats: []\n      }, {\n        row: 11,\n        booked: 0,\n        max: 7,\n        start: 71,\n        booked_seats: []\n      }, {\n        row: 12,\n        booked: 0,\n        max: 3,\n        start: 78,\n        booked_seats: []\n      }],\n      total: 80,\n      booked: 6,\n      rem: 74\n    };\n    this._data = new BehaviorSubject(this.dataStore);\n  }\n  get data() {\n    return this._data.asObservable();\n  }\n  bookseats(seatstobook) {\n    let rem = seatstobook;\n    let bookedseats = [];\n    for (let row of this.dataStore.seatChart) {\n      if (rem == 0) {\n        break;\n      }\n      const rowBookings = Math.min(row.max - row.booked, rem);\n      rem -= rowBookings;\n      const bs = row.booked_seats;\n      let count = 0;\n      for (let i = row.start; i <= row.start + row.max; i++) {\n        if (count == rowBookings) {\n          break;\n        }\n        const alreadyBooked = bs.some(n => n === i);\n        if (!alreadyBooked) {\n          count++;\n          bs.push(i);\n          bookedseats.push(i);\n        }\n      }\n    }\n    this.dataStore.booked += seatstobook;\n    this.dataStore.rem -= seatstobook;\n    return [bookedseats, this.dataStore.rem];\n  }\n}\nBookseatService.ɵfac = function BookseatService_Factory(t) {\n  return new (t || BookseatService)();\n};\nBookseatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookseatService,\n  factory: BookseatService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAmBtC,OAAM,MAAOC,eAAe;EAE1BC;IACQ,cAAS,GAAc;MAC7BC,SAAS,EAAE,CACT;QAAEC,GAAG,EAAE,CAAC;QAAEC,MAAM,EAAE,CAAC;QAAEC,GAAG,EAAE,CAAC;QAAEC,KAAK,EAAE,CAAC;QAAEC,YAAY,EAAE,CAAC,CAAC,EAAE,CAAC;MAAC,CAAE,EAC7D;QAAEJ,GAAG,EAAE,CAAC;QAAEC,MAAM,EAAE,CAAC;QAAEC,GAAG,EAAE,CAAC;QAAEC,KAAK,EAAE,CAAC;QAAEC,YAAY,EAAE,CAAC,EAAE;MAAC,CAAE,EAC3D;QAAEJ,GAAG,EAAE,CAAC;QAAEC,MAAM,EAAE,CAAC;QAAEC,GAAG,EAAE,CAAC;QAAEC,KAAK,EAAE,EAAE;QAAEC,YAAY,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE;MAAC,CAAE,EACpE;QAAEJ,GAAG,EAAE,CAAC;QAAEC,MAAM,EAAE,CAAC;QAAEC,GAAG,EAAE,CAAC;QAAEC,KAAK,EAAE,EAAE;QAAEC,YAAY,EAAE;MAAE,CAAE,EAC1D;QAAEJ,GAAG,EAAE,CAAC;QAAEC,MAAM,EAAE,CAAC;QAAEC,GAAG,EAAE,CAAC;QAAEC,KAAK,EAAE,EAAE;QAAEC,YAAY,EAAE;MAAE,CAAE,EAC1D;QAAEJ,GAAG,EAAE,CAAC;QAAEC,MAAM,EAAE,CAAC;QAAEC,GAAG,EAAE,CAAC;QAAEC,KAAK,EAAE,EAAE;QAAEC,YAAY,EAAE;MAAE,CAAE,EAC1D;QAAEJ,GAAG,EAAE,CAAC;QAAEC,MAAM,EAAE,CAAC;QAAEC,GAAG,EAAE,CAAC;QAAEC,KAAK,EAAE,EAAE;QAAEC,YAAY,EAAE;MAAE,CAAE,EAC1D;QAAEJ,GAAG,EAAE,CAAC;QAAEC,MAAM,EAAE,CAAC;QAAEC,GAAG,EAAE,CAAC;QAAEC,KAAK,EAAE,EAAE;QAAEC,YAAY,EAAE;MAAE,CAAE,EAC1D;QAAEJ,GAAG,EAAE,CAAC;QAAEC,MAAM,EAAE,CAAC;QAAEC,GAAG,EAAE,CAAC;QAAEC,KAAK,EAAE,EAAE;QAAEC,YAAY,EAAE;MAAE,CAAE,EAC1D;QAAEJ,GAAG,EAAE,EAAE;QAAEC,MAAM,EAAE,CAAC;QAAEC,GAAG,EAAE,CAAC;QAAEC,KAAK,EAAE,EAAE;QAAEC,YAAY,EAAE;MAAE,CAAE,EAC3D;QAAEJ,GAAG,EAAE,EAAE;QAAEC,MAAM,EAAE,CAAC;QAAEC,GAAG,EAAE,CAAC;QAAEC,KAAK,EAAE,EAAE;QAAEC,YAAY,EAAE;MAAE,CAAE,EAC3D;QAAEJ,GAAG,EAAE,EAAE;QAAEC,MAAM,EAAE,CAAC;QAAEC,GAAG,EAAE,CAAC;QAAEC,KAAK,EAAE,EAAE;QAAEC,YAAY,EAAE;MAAE,CAAE,CAC5D;MACDC,KAAK,EAAE,EAAE;MACTJ,MAAM,EAAE,CAAC;MACTK,GAAG,EAAE;KACN;IACO,UAAK,GAAG,IAAIV,eAAe,CAAY,IAAI,CAACW,SAAS,CAAC;EApB9C;EAqBhB,IAAIC,IAAI;IACN,OAAO,IAAI,CAACC,KAAK,CAACC,YAAY,EAAE;EAClC;EAGAC,SAAS,CAACC,WAAe;IACvB,IAAIN,GAAG,GAACM,WAAW;IACnB,IAAIC,WAAW,GAAC,EAAE;IAClB,KAAI,IAAIb,GAAG,IAAI,IAAI,CAACO,SAAS,CAACR,SAAS,EAAC;MACtC,IAAGO,GAAG,IAAE,CAAC,EAAC;QACR;;MAEF,MAAMQ,WAAW,GAACC,IAAI,CAACC,GAAG,CAAChB,GAAG,CAACE,GAAG,GAACF,GAAG,CAACC,MAAM,EAACK,GAAG,CAAC;MAClDA,GAAG,IAAEQ,WAAW;MAChB,MAAMG,EAAE,GAACjB,GAAG,CAACI,YAAY;MACzB,IAAIc,KAAK,GAAC,CAAC;MACX,KAAI,IAAIC,CAAC,GAACnB,GAAG,CAACG,KAAK,EAACgB,CAAC,IAAEnB,GAAG,CAACG,KAAK,GAACH,GAAG,CAACE,GAAG,EAACiB,CAAC,EAAE,EAAC;QAC3C,IAAGD,KAAK,IAAEJ,WAAW,EAAC;UACpB;;QAEF,MAAMM,aAAa,GAACH,EAAE,CAACI,IAAI,CAACC,CAAC,IAAEA,CAAC,KAAGH,CAAC,CAAC;QACrC,IAAG,CAACC,aAAa,EAAC;UAChBF,KAAK,EAAE;UACPD,EAAE,CAACM,IAAI,CAACJ,CAAC,CAAC;UACVN,WAAW,CAACU,IAAI,CAACJ,CAAC,CAAC;;;;IAIzB,IAAI,CAACZ,SAAS,CAACN,MAAM,IAAEW,WAAW;IAClC,IAAI,CAACL,SAAS,CAACD,GAAG,IAAEM,WAAW;IAC/B,OAAO,CAACC,WAAW,EAAC,IAAI,CAACN,SAAS,CAACD,GAAG,CAAC;EACzC;;AAtDWT,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAA2B,SAAf3B,eAAe;EAAA4B,YAFd;AAAM","names":["BehaviorSubject","BookseatService","constructor","seatChart","row","booked","max","start","booked_seats","total","rem","dataStore","data","_data","asObservable","bookseats","seatstobook","bookedseats","rowBookings","Math","min","bs","count","i","alreadyBooked","some","n","push","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\s.srija\\SeatManagement\\src\\app\\bookseat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\ntype SEAT_ROW = {\n  row: number;\n  booked: number;\n  max: number;\n  start: number;\n  booked_seats: number[];\n};\n\ntype DATASTORE = {\n  seatChart: SEAT_ROW[];\n  total: number;\n  booked: number;\n  rem: number;\n};\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookseatService {\n\n  constructor() { }\n  private dataStore: DATASTORE = {\n    seatChart: [\n      { row: 1, booked: 2, max: 7, start: 1, booked_seats: [1, 2] },\n      { row: 2, booked: 1, max: 7, start: 8, booked_seats: [11] },\n      { row: 3, booked: 3, max: 7, start: 15, booked_seats: [15, 16, 17] },\n      { row: 4, booked: 0, max: 7, start: 22, booked_seats: [] },\n      { row: 5, booked: 0, max: 7, start: 29, booked_seats: [] },\n      { row: 6, booked: 0, max: 7, start: 36, booked_seats: [] },\n      { row: 7, booked: 0, max: 7, start: 43, booked_seats: [] },\n      { row: 8, booked: 0, max: 7, start: 50, booked_seats: [] },\n      { row: 9, booked: 0, max: 7, start: 57, booked_seats: [] },\n      { row: 10, booked: 0, max: 7, start: 64, booked_seats: [] },\n      { row: 11, booked: 0, max: 7, start: 71, booked_seats: [] },\n      { row: 12, booked: 0, max: 3, start: 78, booked_seats: [] }\n    ],\n    total: 80,\n    booked: 6,\n    rem: 74\n  };\n  private _data = new BehaviorSubject<DATASTORE>(this.dataStore);\n  get data() {\n    return this._data.asObservable();\n  }\n\n\n  bookseats(seatstobook:any){\n    let rem=seatstobook;\n    let bookedseats=[];\n    for(let row of this.dataStore.seatChart){\n      if(rem==0){\n        break;\n      }\n      const rowBookings=Math.min(row.max-row.booked,rem);\n      rem-=rowBookings;\n      const bs=row.booked_seats;\n      let count=0;\n      for(let i=row.start;i<=row.start+row.max;i++){\n        if(count==rowBookings){\n          break;\n        }\n        const alreadyBooked=bs.some(n=>n===i);\n        if(!alreadyBooked){\n          count++;\n          bs.push(i);\n          bookedseats.push(i);\n        }\n      }\n    }\n    this.dataStore.booked+=seatstobook;\n    this.dataStore.rem-=seatstobook;\n    return [bookedseats,this.dataStore.rem];\n  }\n\n  // bookSeats(seatsToBook:any) {\n  //   let rem = seatsToBook;\n  //   let bookedSeats = [];\n\n  //   main: for (let row of this.dataStore.seatChart) {\n  //     if (rem === 0) break main;\n  //     const rowBookings = Math.min(row.max - row.booked, rem);\n  //     rem -= rowBookings;\n  //     row.booked += rowBookings;\n  //     const bs = row.booked_seats;\n  //     let count = 0;\n  //     inner: for (let i = row.start; i <= row.start + row.max; i++) {\n  //       if (count === rowBookings) break inner;\n  //       const alreadyBooked = bs.some(n => n === i);\n  //       if (!alreadyBooked) {\n  //         count++;\n  //         bs.push(i);\n  //         bookedSeats.push(i);\n  //       }\n  //     }\n  //   }\n  //   this.dataStore.booked += seatsToBook;\n  //   this.dataStore.rem -= seatsToBook;\n  //   return [bookedSeats, this.dataStore.rem];\n  // }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}